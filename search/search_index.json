{"config":{"lang":["nl"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TOA","text":""},{"location":"arduino/","title":"Arduino","text":""},{"location":"arduino/liquidcrystal_i2c/","title":"LiquidCrystal met I2C","text":"<p>I2C (Inter-Integrated Circuit) is een methode voor seri\u00eble datacommunicatie met een breed scala aan toepassingen. Het is mogelijk om een LCD-scherm via een speciale I2C-adapter aan te sluiten op een Arduino. Het grote voordeel hiervan is dat er minder kabels nodig zijn. </p> <p></p>"},{"location":"arduino/liquidcrystal_i2c/#aansluiten","title":"Aansluiten","text":"<p>Deze adapter heeft slechts vier aansluitingen: </p> <ul> <li>GND - Grond wordt verbonden aan de GND van de Arduino.</li> <li>VCC - Voltage wordt verbonden met de 5 Volt pin op de Arduino.</li> <li>SDA - Serial Data Line </li> <li>SCL - Serial Clock Line</li> </ul> <p>Zie de blauwe pijl op de afbeelding hieronder voor de SDA en SCL ingangen op de Arduino.</p> <p></p> <p>Er zitten 16 pinnen aan het LCD-scherm en 16 pinnen aan de I2C-adapter. De volgorde is hier belangrijk. Er staan echter weinig herkennigstekens op de adapter. Kijk dus goed naar de afbeelding hieronder om te zien hoe de twee op het breadboard aangesloten moeten worden.</p> <p></p>"},{"location":"arduino/liquidcrystal_i2c/#bibliotheek","title":"Bibliotheek","text":"<p>Om gebruik te kunnen maken van het scherm via de I2C-adapter is een Library (Bibliotheek) nodig. Dit is niet dezelfde als degene die al reeds is ge\u00efnstalleerd in Arduino IDE en zal dus nog toegevoegd moeten worden. Dit kan op de volgende manier:</p> <p>Bibliotheken beheren: Druk op CTRL + Shift + I.</p> <p>Of via het menu: </p> <p>Hulpmiddelen &gt; Bibliotheken beheren... </p> <p>Hier kun je zoeken naar <code>pcf8574 hertel</code>. Je vindt dan de volgende bibliotheek. </p> <p></p> <p>Klik vervolgens op install. Hierna is de bibliotheek ge\u00efnstalleerd en klaar om gebruikt te worden.</p>"},{"location":"arduino/liquidcrystal_i2c/#de-code","title":"De code","text":"<p>Wanneer je een (nieuwe) bibliotheek gebruikt om iets aan te sturen met een Arduino, is het noodzakelijk om de juiste code erbij te zoeken. Deze is meestal te vinden op de site van arduino zelf of anders op de site van de beheerder van de bibliotheek. In dit geval is de code slecht gedocumenteerd en zal ik hieronder dus een aantal voorbeelden geven.</p>"},{"location":"arduino/liquidcrystal_i2c/#hello-world","title":"Hello World!","text":"<p>De code hieronder laat \"Hello World!\" op het scherm verschijnen. </p> <pre><code>#include &lt;LiquidCrystal_PCF8574.h&gt;\n#include &lt;Wire.h&gt;\n\nLiquidCrystal_PCF8574 lcd(0x27);\n\nvoid setup() {\n  lcd.begin(20,4);\n  lcd.setBacklight(255);\n  lcd.setCursor(0,0);\n  lcd.print(\"Hello World!\"); \n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n</code></pre> <p>Voor het oproepen van een bibliotheek in een schets wordt <code>#include</code> gebruikt. Vervolgens staat de naam van de bibliotheek tussen <code>&lt; &gt;</code>.  Een andere manier om een bibliotheek toe te voegen is door deze te kiezen vanuit het menu:</p> <p>Schets &gt; Bibliotheek gebruiken &gt; ...</p> <p>Nieuwe ge\u00efnstalleerde bibliotheken staan meestal onderaan. </p> <p>In bovenstaand voorbeeld worden twee bibliotheken gebruikt:</p> <ul> <li><code>&lt;Wire.h&gt;</code> - Dit is een bibliotheek voor I2C communicatie.</li> <li><code>&lt;LiquidCrystal_PCF8574.h&gt;</code> - Dit is de nieuwe ge\u00efnstalleerde bibliotheek wat interactie met het LCD-scherm mogelijk maakt.</li> </ul> <p>Vervolgens stellen het scherm in met <code>LiquidCrystal_I2C lcd(0x27)</code> waarbij <code>lcd</code> een variabele is om naar de bibliotheek te verwijzen en <code>0x27</code> het (standaard)adres is voor deze seri\u00eble communicatie. </p> <p><code>lcd.begin(20,4)</code> geeft het aantal karakters per regel aan: 4 regels, 20 karakters per regel. </p> <p><code>lcd.backlight(255)</code> zet de achtergrondverlichting aan.</p> <p><code>lcd.setCursor( kolom , rij )</code> zet de cursor op een specifieke plek. Linksboven is in dit geval positie <code>0,0</code>. Rechtsonder is <code>19,3</code>.</p> <p>Vervolgens kan er geprint worden met <code>lcd.print()</code>. Als dit gaat om tekst (datatype: <code>String</code>) dan moet dit tussen aanhalingstekent <code>\" \"</code> staan.</p> <p>Dit alles staat in de <code>void setup()</code> omdat dit alles slechts een keer wordt uitgevoerd. De <code>void loop()</code> is in dit geval dus leeg.</p> <p>[!NOTE]  Het kan zijn dat het scherm moeilijk leesbaar is doordat het te licht of te donker is. Dit kan bijgesteld worden door middel van een potmeter. Dit is het blauwe gedeelte op de I2C (zie foto bovenaan). Om dit bij te stellen kan er gebruik gemaakt worden van een kleine schroevendraaier.  </p>"},{"location":"arduino/liquidcrystal_i2c/#clear","title":"Clear","text":"<p>Om het scherm leeg te maken wordt <code>lcd.clear()</code> gebruikt.</p> <pre><code>#include &lt;LiquidCrystal_PCF8574.h&gt;\n#include &lt;Wire.h&gt;\n\nLiquidCrystal_PCF8574 lcd(0x27);\n\nvoid setup() {\n  lcd.begin(20,4);\n  lcd.clear();\n}\n\nvoid loop() {\n\n}\n</code></pre>"},{"location":"arduino/liquidcrystal_i2c/nieuwkarakter/","title":"Een nieuw karakter maken","text":"<p>Je kunt met de LiquidCrystal bibliotheek een eigen karakter maken. Dit beslaat \u00e9\u00e9n vakje op het display. Hieronder zie je een voorbeeld van hoe je dit doet.</p>"},{"location":"arduino/liquidcrystal_i2c/nieuwkarakter/#code","title":"Code","text":"<pre><code>#include &lt;LiquidCrystal_PCF8574.h&gt;\n#include &lt;Wire.h&gt;\n\nLiquidCrystal_PCF8574 lcd(0x27);\n\nbyte smiley[8] ={\n    B00000,\n    B01010,\n    B01010,\n    B00000,\n    B10001,\n    B10001,\n    B01110,\n    B00000};\n\n\nvoid setup() {\n  lcd.begin(20,4);  \n  lcd.setBacklight(255);  \n  lcd.createChar(1,smiley); \n\n  lcd.setCursor(10,1);\n  lcd.write(1);\n}\n\nvoid loop() {\n\n}\n</code></pre> <p>Een aantal regels heb je als het goed is eerder gezien. Een aantal regels zijn nieuw. Laten we de code stap voor stap bekijken. </p> <p><pre><code>// Allereerst roepen we de nodige bibliotheken op.\n#include &lt;LiquidCrystal_PCF8574.h&gt;  \n#include &lt;Wire.h&gt;\n\n// We verbinden het LCD-scherm met de bibliotheek en geven het de naam `lcd`.\nLiquidCrystal_PCF8574 lcd(0x27); \n</code></pre> Vervolgens gebeurt er iets nieuws. Dit lijkt ingewikkeld, maar wat je ervan moet begrijpen is eenvoudig.</p> <p><pre><code>byte smiley[8] ={\n    B00000,\n    B01010,\n    B01010,\n    B00000,\n    B10001,\n    B10001,\n    B01110,\n    B00000};\n</code></pre> Het begint met een datatype (byte) en variabele naam (smiley). Daarna wordt feitelijk het karakter pixel voor pixel weergegeven. Deze bestaat uit 8 regels van 5 pixels. Een <code>1</code> zet de pixel aan en een <code>0</code> is uit. Hieronder zie je links hoe een karakter-vakje is ingedeeld, en rechts hoe de smiley eruit komt de zien.</p> <p></p> <p>Dit is echter nog niet genoeg om de smiley daadwerkelijk op het scherm te plaatsen. </p> <p>De bibliotheek beschikt over een aantal posities om een teken in op te slaan. Voor het gemak gaan we uit van positie 1 t/m 8.  <code>lcd.createChar(1, smiley)</code> is de regel die jouw tekentje beschikbaar maakt om te printen. Deze regel koppelt de informatie van <code>smiley</code> aan , in dit geval, positie 1. </p> <p>Voordat je iets naar het scherm print, wil je altijd aangegeven waar je iets wilt printen. Dit doe je met <code>lcd.setCursor(kolom,rij)</code>. </p> <p>Vervolgens kun je je tekentje printen met <code>lcd.write(1)</code>. De <code>1</code> verwijst hier naar de <code>1</code> uit <code>lcd.createChar(1, smiley)</code> en die verwijst naar <code>byte smiley[8]</code> bovenaan je code. </p>"},{"location":"arduino/liquidcrystal_i2c/opdracht/","title":"Opdracht: Rondje over het scherm.","text":"<p>Het is nu tijd voor een opdracht. Maak een eigen tekentje en laat deze een rondje langs de rand van het scherm lopen. </p> <p></p> <p>Eisen: - Het tekentje maakt een vloeiende beweging (blijft niet in de hoeken 'hangen').  - Het tekentje heeft een duidelijk voorkant en veranderd dus van richting (denk aan PacMan).  - Gebruik een for-loop. </p>"},{"location":"arduino/liquidcrystal_i2c/opdracht/#hoe-beweegt-een-tekentje-over-het-scherm","title":"Hoe beweegt een tekentje over het scherm?","text":"<p>Het tekentje wekt de indruk van beweging wanneer je het achtereenvolgens hokje na hokje laat verschijnen. In de loop heb je hiervoor vier regels nodig die zich herhalen.</p> <pre><code>  // Dit stelt de positie in op het scherm waar het tekentje geplaatst wordt.\n  lcd.setCursor(0,0);  \n\n  // Dit schrijft het tekentje naar die positie.\n  lcd.write(1); \n\n  // Een korte delay - de tijd die het op het scherm blijft.\n  delay(200); \n\n  // Het scherm wordt gewist. \n  lcd.clear(); \n</code></pre> <p>Wanneer deze vier regels herhaalt worden met elke keer een volgende positie - <code>0,0</code>, <code>1,0</code>, <code>2,0</code>, <code>3,0</code>, <code>4,0</code> etc. - 'beweegt' het tekentje dus van links naar rechts.  Het zou echter erg omslachtig zijn wanneer deze regels allemaal uitgeschreven zouden worden. Daarom gebruiken we een for-loop.</p>"},{"location":"arduino/liquidcrystal_i2c/opdracht/#hoe-werkt-een-for-loop-ook-alweer","title":"Hoe werkt een for-loop ook alweer?","text":"<p>De for-loop wordt gebruikt om een stukje code meerdere malen uit te voeren. De syntax is als volgt: <pre><code>  for (initiatie; voorwaarde; stapgrootte) {\n      // Deze code wordt herhaald zoalng er aan de voorwaarde voldaan wordt\n  }\n</code></pre></p> <p>Parameters:  - initiatie: bijvoorbeeld <code>int i = 0</code>. Dit zegt dat er een variabele <code>i</code> is met datatype <code>integer</code> (heel getal) en deze wordt gelijkgesteld aan 0. Dit gebeurt 1x zodra de for-loop bereikt wordt.  - voorwaarde: bijvoorbeeld <code>i &lt; 10</code>. tijdens elke stap wordt gekeken of deze voorwaarde <code>true</code> is. Zo ja, dan wordt de code uitgevoerd en daarna de stapgrootte toegepast. - stapgrootte: hiermee kan de ingestelde variabele toenemen of afnemen, bijvoorbeeld <code>i = i + 1</code>. </p> <p>Bekijk het volgende voorbeeld:</p> <pre><code>  Serial.println(\"Voor de for-loop\");\n\n  for(int i = 1; i &lt; 4; i++){\n    Serial.print(\"In de for-loop: \");\n    Serial.println(i);\n  }\n\n  Serial.println(\"Na de for-loop\"); \n</code></pre> <p>Hier wordt eerst een regel uitgeprint. Daarna wordt de for-loop gestart. Hij start met i = 1. Dat is kleiner dan 4, dus de code wordt uitgevoerd: dit print een regel plus de i (dus 1). De stapgrootte wordt toegepast: <code>i++</code> betekent hetzelfde als <code>i = i + 1</code>. Dan is <code>i</code> dus 2 en nog steeds kleiner dan 4. Dit herhaalt zich tot  <code>i = 4</code> en het dus niet meer aan de voorwaarde voldoet. De for-loop is klaar en de regel eronder wordt dan geprint. De output ziet er dus als volgt uit: </p> <pre><code>Voor de for-loop\nIn de for-loop: 1\nIn de for-loop: 2\nIn de for-loop: 3\nNa de for-loop\n</code></pre>"},{"location":"arduino/liquidcrystal_i2c/opdracht/#aan-de-slag","title":"Aan de slag","text":"<p>Deze informatie zou moeten voldoen om de opdracht te kunnen maken. Succes. </p>"},{"location":"biologie/","title":"Biologie","text":""},{"location":"raspberrypi/","title":"Raspberry Pi","text":""}]}